// 대망의 node.js
// node.js가 뭔가
// 자바스크립트를 써서 데이터베이스에 연결해 서버로 요청을 보내는 기능을 구현할 수 있다.
// node.js는 크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임이다.
// node.js를 웹서버 자체로 생각하는 건 잘못된 것 아파치 같은 웹 서버 중 하나가 아니다.
// 자바 스크립트로 브라우저가 아니라 서버에서 자바스크립트가 동작하도록 런타임 플랫폼이라고 생각하면 된다.

// 2009년에 라이언 달이라는 개발자가 node.js를 처음 만들었고 지금까지도 업데이트가 잘 되고 있다.
// node.js를 설치해서 실행한다고 웹 서버가 실행되는게 아니고 node.js에 있는 라이브러리를 npm(node package manager)를 이용해서 설치하여 사용할 수 있다.

// node.js의 특징 4개

// 1. 자바스크립트로 백엔드 서버 로직을 개발할 수 있다.(장점)

// 2. 구글에서 개발한 js엔진을 쓰기 때문에 속도가 빠르다.(인터프린터 방식)

// 3. 논 블로킹 방식 node.js의 모든 API는 비동적으로 작동하며 호출 후 다른 API를 바로 불러올 수 있다. 한번 불러왔던 API를 요청하면 이벤트 루프가 확인해서 동작

// node.js왜 생겼나면 방대한 오픈소스 생태계를 구축하기 위해서
// npm를 사용해서 패키지들을 다운 받을 수 있고, 리액트 익스프레스 코어 등 익숙한 것들의 패키지들은 다 npm에 등록되어있다.
// 특수한 걸 만드는 사람이 아닌 이상 거의 다 기능을 이미 나와 있는 것들이 많다.
// 잘 쓰면 빠르고 좋은 효과를 볼 수 있다.

// 모듈
// 패키지는 클래스의 묶음, 패키지의 모임이 모듈
// 기능들의 모임, 파일의 모임

// require를 많이 사용할 예정
// node.js의 require이 무엇인가?

// html에서 !엔터가 안될 때 즉, 자동완성이 안될 때 컨트롤+스페이스바

// node.js에서 모듈을 가져오는 방법 require함수를 사용해서 가져온다
// require(경로나 이름);
const http = require("http");

// http객체 안의 createServer함수를 사용해서 서버를 만듦
const server = http.createServer((req, res) => {
  // req 요청값
  // 404 500 이런 오류들
  // http에서 ok를 나타내는 번호가 200번이라서
  req.statusCode = 200;
  // http 상태 코드
  // 100번 때 : 정보응답
  // 200번 때 : 성공응답
  // 300번 때 : 리다이렉션 메시지, 요청한 url이 변경됐을 때
  // 400번 때 : 클라이언트상의 오류, 클라이언트에 오류가 있을 때
  // 500번 때 : 서버 오류 응답, 서버에 오류가 있을 때
  // write함수 문자를 써서 보내주는 함수
  res.write("123");
  // end끝맺음 매개변수 문자를 보내주면서 끝
  res.end("456");
});

const PORT = 3000;

// 서버가 되는 server에 함수를 사용한다. 서버를 열어줌
// listen함수로 서버를 열어줌
server.listen(PORT, () => {
  console.log("port : ", PORT);
});

// server 객체의 준비가 되면 listen함수로 해당 포트에 서버를 대기시킨다.
// 서버를 대기시키는 이유는 클라이언트에서 요청이 오면 서버가 받아서 처리할 수 있다.
// 여기 들어가는 매개변수는 (포트번호, 호스트의 이름, 백 로그, 콜백 함수)이렇게 있다.

// 이렇게만 해도 웹 서버가 열린다.

// node.js코딩을 해볼 수 있는 곳 테스트용 코드들
// 코드 샌드박스, glitch 등등
// 노드 서버를 바로 볼 수 있고 코딩도 바로바로 테스트 해볼 수 있다.

// glitch 장점
// https 검증도 되어있는 웹 서버를 테스트로 사용해 볼 수 있다.
// node프로젝트 생성 버튼을 누르고
// server.js에 서버 로직을 작성한 후 바로
// preview 버튼을 눌러서 위에 버튼은 바로 그 창에서 화면을 볼 수 있고
// 테스트용 링크가 필요하면 preview 버튼 눌렀을 때 previw in a new window 이 버튼을 누르면
// 클라이언트 요청을 보내볼 웹서버 주소로 접속이 된다.
// 그래서 테스트에 용이하게 사용할 수 있다.

// node.js 버전관리
// 버전관리 하는 방법 서버노드는 최신인데 로컬노드가 구버전이면 최신버전은 기능이 있는데 구버전에 없을 경우에 기능이 실행되지 않는다.
// 이런 버전 문제가 생겼을 경우 해결해주는 아이가 있다(물론 우리가 조작 및 설정이 필요하다)
// nvm(node version manager)
// 맥 tj/n(node version manager)
// 윈도우에선 https://github.com/coreybutler/nvm-windows/releases 에서 밑으로 스크롤 하고 nvm-setup.zip 설치하고
// 이전 버전 보려면 https://nodejs.org/ko/download/releases/
//
// nvm이 잘 설치 되어있는지 확인 nvm -v 버전 확인
// nvm에 설치되어있는 버전 확인 명령어
// nvm ls

// nvm 변경할 node 버전 설치 명령어
// nvm install v 여기에 해당버전

// node 설치된 버전을 적용된 명령어 버전을 바꿔주는 명령어
// nvm use 바꿀 버전

// state 오류가 발생하면 cmd를 관리자 권한으로 실행해야 한다.

// ex)
// nvm -v
// nvm ls
// nvm install v16.16.0 (버전이 있다고 가정)
// nvm use v.16.16.0 (관리자 권한으로 실행)

/*
    npm install -g n 설치 명령어
    node -v
    nvm list available
    nvm install 17.3.0 (nvm install 원하는 버전)
    nvm list
    nvm use 17.3.0
    node -v
*/
